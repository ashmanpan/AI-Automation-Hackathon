version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hackathon-postgres
    environment:
      POSTGRES_DB: hackathon_platform
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - hackathon-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: hackathon-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    ports:
      - "9000:9000"  # MinIO API
      - "9001:9001"  # MinIO Console
    volumes:
      - minio_data:/data
    networks:
      - hackathon-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Backend API (optional - uncomment to run backend in Docker)
  # backend:
  #   build:
  #     context: ./backend
  #     dockerfile: Dockerfile
  #   container_name: hackathon-backend
  #   environment:
  #     - NODE_ENV=development
  #     - PORT=5000
  #     - DB_HOST=postgres
  #     - DB_PORT=5432
  #     - DB_NAME=hackathon_platform
  #     - DB_USER=postgres
  #     - DB_PASSWORD=postgres
  #     - MINIO_ENDPOINT=minio
  #     - MINIO_PORT=9000
  #     - MINIO_USE_SSL=false
  #     - MINIO_ACCESS_KEY=minioadmin
  #     - MINIO_SECRET_KEY=minioadmin
  #   ports:
  #     - "5000:5000"
  #   volumes:
  #     - ./backend:/app
  #     - /app/node_modules
  #   depends_on:
  #     - postgres
  #     - minio
  #   networks:
  #     - hackathon-network

volumes:
  postgres_data:
    driver: local
  minio_data:
    driver: local

networks:
  hackathon-network:
    driver: bridge
